source('4.R')
d
head(d)
prcomp(d)
d
head(d)
data.as.frame(d)
data.frame(d)
data.matrix(d)
data.frame(d)
data.matrix(d)
as.data.frame(d)
as.matrix(d)
as.matrix.data.frame(d)
d
matrix(d)
as.matrix(d)
as.data.frame(d)
data.matrix(d)
data.table(d)
data.frame(d)
data.matrix(d)
data.frame(d)
data.matrix(d)
data.frame(d)
data.matrix(d)
dm = data.matrix(d)
prcomp(dm)
summary(dm)
desc(dm)
library(devtools)
install_github("ggbiplot", "vqv")
library(devtools)
install.packages(devtools)
install.packages('devtools')
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, 
              groups = ir.species, ellipse = TRUE, 
              circle = TRUE)
pca = prcomp(dm)
g <- ggbiplot(pca)
print(g)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1)
print(g)
g <- ggbiplot(pca, obs.scale = 1)
print(g)
g <- ggbiplot(pca, var.scale = 1)
print(g)
g <- ggbiplot(pca)
print(g)
g <- ggbiplot(pca, ellipse = TRUE)
print(g)
g <- ggbiplot(pca, ellipse = TRUE, circle = TRUE)
print(g)
?ggbiplot
??biplot
biplot(pca)
pca = prcomp(dm, center=TRUE, scale=TRUE)
g <- ggbiplot(pca, ellipse = TRUE, circle = TRUE)
print(g)
dm
lm1 = lm(X1500 ~ X400+Rank ,data=dm)
lm1 = lm(X1500 ~ X400+Rank ,data=d)
library("FactoMineR")
library("plyr")
data(decathlon, package="FactoMineR")
d = rename(decathlon, c("100m"="X100m", "400m"="X400m",
"110m.hurdle"="X110m.hurdle", "1500m"="X1500m"))
lm1 = lm(X1500 ~ X400+Rank ,data=d)
d
lm1 = lm(X1500m ~ X400m+Rank ,data=d)
lm1
summary(lm1)
??ggbiplot
?ggbiplot
pca
summaary(pca)
summary(pca)
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=2:3))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=2:4))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(2,4)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(1,3)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(1,2)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(1,3)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(1,2)))
biplot(pca)
?biplot
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(1,2)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(1,2)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(1,3)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(2,3)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(1,4)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(2,4)))
print(ggbiplot(pca, ellipse = TRUE, circle = TRUE, choices=c(3,4)))
autoplot(prcomp(d))
autoplot(prcomp(dm))
library(ggfortify)
install.packages('ggfortify')
library(ggfortify)
autoplot(prcomp(dm))
autoplot(prcomp(dm), colour = 'Rank')
autoplot(prcomp(dm), colour = 'Competetion')
autoplot(prcomp(dm), colour = 'Competition')
autoplot(prcomp(dm), colour = 'X1500m')
autoplot(prcomp(dm), colour = 'X400m')
autoplot(prcomp(dm), colour = 'Points')
autoplot(prcomp(dm), colour = 'Points', label=TRUE)
autoplot(prcomp(dm), colour = 'Points', loadings=TRUE)
autoplot(prcomp(dm), colour = 'Points', loadings=TRUE, loadings.label = TRUE)
autoplot(prcomp(dm), colour = 'Points', loadings=TRUE, loadings.label = TRUE, scale=0)
autoplot(prcomp(dm), colour = 'Points', loadings=TRUE, loadings.label = TRUE, scale=1)
autoplot(prcomp(dm), colour = 'Points', loadings=TRUE, loadings.label = TRUE, scale=2)
autoplot(prcomp(dm), colour = 'Points', loadings=TRUE, loadings.label = TRUE)
autoplot(prcomp(dm), colour = 'Points', loadings=TRUE)
autoplot(prcomp(dm), colour = 'X1500m', loadings=TRUE)
autoplot(prcomp(dm), colour = 'X100m', loadings=TRUE)
autoplot(prcomp(dm), colour = 'X100m', loadings=TRUE)
?ggbiplot
w
who()
w()
who
ls
ls()
demo()
demo(smooth)
demo()
demo(lm.glm)
demo(nlm)
demo()
demo(glm.vr)
mean(d)
mean(dm)
dm
mean(dm)
?mean
loadings(d)
loadings(dm)
princomp(dm)
p1 = princomp(dm)
p2 = princomp(dm, cov=TRUE)
p2 = princomp(dm, cor=TRUE)
p2
p1
loadings(p1)
plot(p1)
biplot(p1)
?princomp
plot(p2)
biplot(p2)
plot(p2)
library(Rcmdr)
d
plot(Points ~ X1500m, data=d)
svd(d)
svd(dm)
plot(svd(dm)$d)
plot(log(svd(dm)$d))
scaled = scale(dm)
scaled
svd(scaled)
plot(svd(scaled$d))
plot(svd(scaled)$d)
d
?cbind
res.pca = PCA(decathlon[,1:12], scale.unit=TRUE, ncp=5, quanti.sup=c(11: 12), graph=T)
library(FactoMiner)
library(FactoMineR)
res.pca = PCA(decathlon[,1:12], scale.unit=TRUE, ncp=5, quanti.sup=c(11: 12), graph=T)
res.pca = PCA(decathlon[,1:12], scale.unit=TRUE, ncp=5, quanti.sup=c(11: 12), quali.sup=13, graph=T)
res.pca = PCA(decathlon, scale.unit=TRUE, ncp=5, quanti.sup=c(11: 12), quali.sup=13, graph=T)
plot.PCA(res.pca, axes=c(1, 2), choix="ind", habillage=13)
plot.PCA(res.pca, axes=c(1, 3), choix="ind", habillage=13)
res.pca = PCA(decathlon, scale.unit=TRUE, ncp=2, quanti.sup=c(11: 12), quali.sup=13, graph=T)
princomp(decathlon)
princomp(dm)
plot(~dm$X100m)
plot(~d$X100m)

plot(~X100m+X400m, data=d)
plot(~X100m+X400m+X1500m, data=d)
plot(~X100m+X400m+X1500m+X110m.hurdle, data=d)
plot(~X100m+X400m+X1500m+Points, data=d)
plot(~X100m+X400m+X1500m+Points+Rank, data=d)
plot(~X100m+X400m+X1500m+Competition, data=d)
plot(~X100m+X400m+X1500m+Discus, data=d)
plot(~X100m+X400m+X1500m+Discus+Pole.vault, data=d)
plot(~Javeline+Discus+Pole.vault, data=d)
plot(~Javeline+Discus+Pole.vault+Shot.put, data=d)
plot(~Javeline+Discus+Pole.vault+Shot.put+Points, data=d)
?plot
data(iris)
head(iris)
plot(iris)
ir.pca <- prcomp(log.ir,
                 center = TRUE,
scale. = TRUE)
ir.pca <- prcomp(log.ir, center = TRUE, scale. = TRUE)
ir.pca <- prcomp(iris[,1:4], center = TRUE, scale. = TRUE)
pca <- prcomp(iris[,1:4], center = TRUE, scale. = TRUE)
pca
plot(pca)
biplot(pca)
ggbiplot(pca)
library(ggbiplot)
ggbiplot(pca)
ggbiplot(pca, groups = iris[,5])
pca <- prcomp(decathlon[,1:12], center = TRUE, scale. = TRUE)
ggbiplot(pca, groups = decathlon[,14])
ggbiplot(pca, groups = decathlon[,13])
ggbiplot(pca, groups = decathlon[,13], ellipse=T)
pca <- prcomp(iris[,1:4], center = TRUE, scale. = TRUE)
ggbiplot(pca, groups = iris[,5], ellipse=T)
newplot()
plot.new()
plot.window()
ggbiplot(pca, groups = iris[,5], ellipse=T)
plot(~1+2, data=iris)
plot(~Sepal.Length, data=iris)
plot(~iris[1] + iris[2])
plot(iris[1], iris[2])
plot(~Sepal.Length + Sepal.Width, data=iris)
plot(~Sepal.Length + Sepal.Width, data=iris, groups=iris[5])
?plot
library(ggplot2)
qplot(~Sepal.Length + Sepal.Width, data=iris, colour=iris[5])
qplot(~Sepal.Length + Sepal.Width, data=iris, colour=Species)
qplot(Sepal.Length, Sepal.Width, data=iris, colour=Species)
pca
ggbiplot(pca, groups = iris[,5], ellipse=T)
qplot(Sepal.Length, Sepal.Width, data=iris, colour=Species)
ggbiplot(pca, groups = iris[,5], ellipse=T)
?ggbiplot
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,3))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(2,3))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(2,4))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(3,4))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,4))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,3))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,2))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,4))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(2,3))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,3))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,2))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,3))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,2))
ggbiplot(pca, groups = iris[,5], ellipse=T, choices = c(1,3))
require(caret)
trans = preProcess(iris[,1:4], 
                   method=c("BoxCox", "center", 
                            "scale", "pca"))
install.packages('caret')
install.packages('caret')
require(caret)
trans = preProcess(iris[,1:4], 
                   method=c("BoxCox", "center", 
                            "scale", "pca"))
PC = predict(trans, iris[,1:4])
PC
plot(PC)
qplot(PC)
qplot(PC$PC1)
qplot(PC$PC1, PC$PC2)
qplot(PC$PC1, PC$PC2, colours=iris[5])
qplot(PC$PC1, PC$PC2, colours=iris[5])
qplot(PC$PC1, PC$PC2, data=PC, colour=iris[5])
qplot(PC$PC1, PC$PC2, colour=iris[5])
qplot(PC$PC1, PC$PC2, colour=iris[5])
iris[5]
qplot(PC$PC1, PC$PC2, colour=iris[5])
qplot(PC1, PC2, data=PC, colour=iris[5])
qplot(PC1, PC2, data=PC)
cbind(PC, iris[5])
PC=cbind(PC, iris[5])
qplot(PC1, PC2, data=PC, colour=PC[3])
qplot(PC1, PC2, data=PC, colour=Species)
trans$rotation
